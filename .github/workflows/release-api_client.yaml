name: Release API

on:
  workflow_run:
    workflows: ["Test_all_push"]
    types:
      - completed

jobs:
  semantic_release:
    if: ${{ github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'dev' || github.event.workflow_run.head_branch == 'staging' || github.event.workflow_run.head_branch == 'main') }}
    permissions:
      contents: write
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Get current and previous SHAs
        id: sha
        run: |
          current_sha="${{ github.event.workflow_run.head_sha }}"
          base_sha="${{ github.event.workflow_run.head_commit.before }}"
          if [ -z "$base_sha" ]; then
            base_sha=$(git rev-parse ${current_sha}^)
          fi
          echo "current_sha=$current_sha" >> $GITHUB_OUTPUT
          echo "previous_sha=$base_sha" >> $GITHUB_OUTPUT
          echo $current_sha
          echo $base_sha

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        with:
          base_sha: ${{ steps.sha.outputs.previous_sha }}
          sha: ${{ steps.sha.outputs.current_sha }}
          files_yaml: |
            api:
              - '!client/**'
              - api/**
              - package.json
              - package-lock.json
              - .releaserc.json
              - Dockerfile
              - .dockerignore
              - .babelrc
              - jest.config.js
              - jest.setup.js
            client:
              - client/**

      # Check if any API files were changed
      - name: (API) Check if any files were changed
        if: steps.changed-files.outputs.api_any_changed == 'true'
        run: npm ci

      - name: (API) Semantic release (API) or Get latest release version
        if: steps.changed-files.outputs.api_any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: version
        run: |
          if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
            # Dry run to check if there would be a release
            if ! npx semantic-release --dry-run > semantic-dry-run.txt 2>&1; then
              echo "No release needed based on semantic-release dry run"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Proceed with actual release
            npx semantic-release > semantic-output.txt
            version=$(grep -oP 'Published release \K\S+' semantic-output.txt | head -n1)
            
            if [ -z "$version" ]; then
              echo "No version was published"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            # For dev/staging - get latest API release version
            if ! releases=$(curl --silent --fail "https://api.github.com/repos/${{ github.repository }}/releases"); then
              echo "Failed to fetch releases, using fallback version"
              version="0.0.0"
            else
              # Find latest api-v* tag
              version=$(echo "$releases" | grep -o '"tag_name": "api-v[0-9]\+\.[0-9]\+\.[0-9]\+"' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1)
              if [ -z "$version" ]; then
                version="0.0.0"  # fallback if no API release exists
              fi
            fi
          fi

          sha=$(git rev-parse --short HEAD)

          if [[ "${{ github.event.workflow_run.head_branch }}" == "dev" ]]; then
            tag="${version}-dev.${sha}"
          elif [[ "${{ github.event.workflow_run.head_branch }}" == "staging" ]]; then
            tag="${version}-staging.${sha}"
          else
            tag="${version}"
          fi

          echo "Docker tag: $tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: (API) Log in to DockerHub
        if: steps.changed-files.outputs.api_any_changed == 'true' && steps.version.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: (API) Build and push Docker image
        if: steps.changed-files.outputs.api_any_changed == 'true' && steps.version.outputs.skip != 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-realty-api:${{ steps.version.outputs.tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-realty-api:${{ steps.version.outputs.tag }}

      - name: (API) Create Deployment Summary
        if: steps.changed-files.outputs.api_any_changed == 'true' && steps.version.outputs.skip != 'true'
        run: |
          # Create header
          echo "## 🚀 (API) Deployment Summary" >> $GITHUB_STEP_SUMMARY

          # Version information
          echo "### (API) Version Details" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :--- |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.event.workflow_run.head_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit SHA | \`$(git rev-parse --short HEAD)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Tag | \`${{ steps.version.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY

          # Docker information
          echo "### 🐳 (API) Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ secrets.DOCKER_USERNAME }}/mern-realty-api:${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # Check if any Client files were changed
      - name: (Client) Check if any files were changed
        if: steps.changed-files.outputs.client_any_changed == 'true'
        working-directory: ./client
        run: npm ci

      - name: (Client) Semantic release (Client) or Get latest release version
        if: steps.changed-files.outputs.client_any_changed == 'true'
        working-directory: ./client
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: version-client
        run: |
          if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
            # Dry run to check if there would be a release
            if ! npx semantic-release --dry-run > semantic-dry-run.txt 2>&1; then
              echo "No release needed based on semantic-release dry run"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Proceed with actual release
            npx semantic-release > semantic-output.txt
            version=$(grep -oP 'Published release \K\S+' semantic-output.txt | head -n1)
            
            if [ -z "$version" ]; then
              echo "No version was published"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            # For dev/staging - get latest Client release version
            if ! releases=$(curl --silent --fail "https://api.github.com/repos/${{ github.repository }}/releases"); then
              echo "Failed to fetch releases, using fallback version"
              version="0.0.0"
            else
              # Find latest client-v* tag
              version=$(echo "$releases" | grep -o '"tag_name": "client-v[0-9]\+\.[0-9]\+\.[0-9]\+"' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1)
              if [ -z "$version" ]; then
                version="0.0.0"  # fallback if no Client release exists
              fi
            fi
          fi

          sha=$(git rev-parse --short HEAD)

          if [[ "${{ github.event.workflow_run.head_branch }}" == "dev" ]]; then
            tag="${version}-dev.${sha}"
          elif [[ "${{ github.event.workflow_run.head_branch }}" == "staging" ]]; then
            tag="${version}-staging.${sha}"
          else
            tag="${version}"
          fi

          echo "Docker tag: $tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: (Client) Log in to DockerHub
        if: steps.changed-files.outputs.client_any_changed == 'true' && steps.version-client.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: (Client) Build and push Docker image
        if: steps.changed-files.outputs.client_any_changed == 'true' && steps.version-client.outputs.skip != 'true'
        working-directory: ./client
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-realty-client:${{ steps.version-client.outputs.tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-realty-client:${{ steps.version-client.outputs.tag }}

      - name: (Client) Create Deployment Summary
        if: steps.changed-files.outputs.client_any_changed == 'true' && steps.version-client.outputs.skip != 'true'
        working-directory: ./client
        run: |
          # Create header
          echo "## 🚀 (Client) Deployment Summary" >> $GITHUB_STEP_SUMMARY

          # Version information
          echo "### (Client) Version Details" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :--- |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.event.workflow_run.head_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit SHA | \`$(git rev-parse --short HEAD)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Tag | \`${{ steps.version-client.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY

          # Docker information
          echo "### 🐳 (Client) Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ secrets.DOCKER_USERNAME }}/mern-realty-client:${{ steps.version-client.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
